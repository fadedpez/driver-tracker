// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: drivertracker.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NameLast          string `protobuf:"bytes,2,opt,name=nameLast,proto3" json:"nameLast,omitempty"`
	NameFirst         string `protobuf:"bytes,3,opt,name=nameFirst,proto3" json:"nameFirst,omitempty"`
	DriverNumber      string `protobuf:"bytes,4,opt,name=driverNumber,proto3" json:"driverNumber,omitempty"`
	DriverNationality string `protobuf:"bytes,5,opt,name=driverNationality,proto3" json:"driverNationality,omitempty"`
}

func (x *Driver) Reset() {
	*x = Driver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{0}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetNameLast() string {
	if x != nil {
		return x.NameLast
	}
	return ""
}

func (x *Driver) GetNameFirst() string {
	if x != nil {
		return x.NameFirst
	}
	return ""
}

func (x *Driver) GetDriverNumber() string {
	if x != nil {
		return x.DriverNumber
	}
	return ""
}

func (x *Driver) GetDriverNationality() string {
	if x != nil {
		return x.DriverNationality
	}
	return ""
}

type StoreDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameLast          string `protobuf:"bytes,1,opt,name=nameLast,proto3" json:"nameLast,omitempty"`
	NameFirst         string `protobuf:"bytes,2,opt,name=nameFirst,proto3" json:"nameFirst,omitempty"`
	DriverNumber      string `protobuf:"bytes,3,opt,name=driverNumber,proto3" json:"driverNumber,omitempty"`
	DriverNationality string `protobuf:"bytes,4,opt,name=driverNationality,proto3" json:"driverNationality,omitempty"`
}

func (x *StoreDriverRequest) Reset() {
	*x = StoreDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDriverRequest) ProtoMessage() {}

func (x *StoreDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDriverRequest.ProtoReflect.Descriptor instead.
func (*StoreDriverRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{1}
}

func (x *StoreDriverRequest) GetNameLast() string {
	if x != nil {
		return x.NameLast
	}
	return ""
}

func (x *StoreDriverRequest) GetNameFirst() string {
	if x != nil {
		return x.NameFirst
	}
	return ""
}

func (x *StoreDriverRequest) GetDriverNumber() string {
	if x != nil {
		return x.DriverNumber
	}
	return ""
}

func (x *StoreDriverRequest) GetDriverNationality() string {
	if x != nil {
		return x.DriverNationality
	}
	return ""
}

type StoreDriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver *Driver `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (x *StoreDriverResponse) Reset() {
	*x = StoreDriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDriverResponse) ProtoMessage() {}

func (x *StoreDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDriverResponse.ProtoReflect.Descriptor instead.
func (*StoreDriverResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{2}
}

func (x *StoreDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type GetDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDriverRequest) Reset() {
	*x = GetDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverRequest) ProtoMessage() {}

func (x *GetDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverRequest.ProtoReflect.Descriptor instead.
func (*GetDriverRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{3}
}

func (x *GetDriverRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Driver *Driver `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (x *GetDriverResponse) Reset() {
	*x = GetDriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverResponse) ProtoMessage() {}

func (x *GetDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverResponse.ProtoReflect.Descriptor instead.
func (*GetDriverResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{4}
}

func (x *GetDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

type SearchDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName string `protobuf:"bytes,1,opt,name=lastName,proto3" json:"lastName,omitempty"`
}

func (x *SearchDriverRequest) Reset() {
	*x = SearchDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDriverRequest) ProtoMessage() {}

func (x *SearchDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDriverRequest.ProtoReflect.Descriptor instead.
func (*SearchDriverRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{5}
}

func (x *SearchDriverRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type SearchDriverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drivers []*Driver `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
}

func (x *SearchDriverResponse) Reset() {
	*x = SearchDriverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDriverResponse) ProtoMessage() {}

func (x *SearchDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDriverResponse.ProtoReflect.Descriptor instead.
func (*SearchDriverResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{6}
}

func (x *SearchDriverResponse) GetDrivers() []*Driver {
	if x != nil {
		return x.Drivers
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TeamName            string `protobuf:"bytes,2,opt,name=teamName,proto3" json:"teamName,omitempty"`
	TeamNationality     string `protobuf:"bytes,3,opt,name=teamNationality,proto3" json:"teamNationality,omitempty"`
	TeamPrincipal       string `protobuf:"bytes,4,opt,name=teamPrincipal,proto3" json:"teamPrincipal,omitempty"`
	TeamEstablishedYear string `protobuf:"bytes,5,opt,name=teamEstablishedYear,proto3" json:"teamEstablishedYear,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{7}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Team) GetTeamNationality() string {
	if x != nil {
		return x.TeamNationality
	}
	return ""
}

func (x *Team) GetTeamPrincipal() string {
	if x != nil {
		return x.TeamPrincipal
	}
	return ""
}

func (x *Team) GetTeamEstablishedYear() string {
	if x != nil {
		return x.TeamEstablishedYear
	}
	return ""
}

type StoreTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName            string `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
	TeamNationality     string `protobuf:"bytes,2,opt,name=teamNationality,proto3" json:"teamNationality,omitempty"`
	TeamPrincipal       string `protobuf:"bytes,3,opt,name=teamPrincipal,proto3" json:"teamPrincipal,omitempty"`
	TeamEstablishedYear string `protobuf:"bytes,4,opt,name=teamEstablishedYear,proto3" json:"teamEstablishedYear,omitempty"`
	TeamYearsActive     string `protobuf:"bytes,5,opt,name=teamYearsActive,proto3" json:"teamYearsActive,omitempty"`
}

func (x *StoreTeamRequest) Reset() {
	*x = StoreTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTeamRequest) ProtoMessage() {}

func (x *StoreTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTeamRequest.ProtoReflect.Descriptor instead.
func (*StoreTeamRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{8}
}

func (x *StoreTeamRequest) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *StoreTeamRequest) GetTeamNationality() string {
	if x != nil {
		return x.TeamNationality
	}
	return ""
}

func (x *StoreTeamRequest) GetTeamPrincipal() string {
	if x != nil {
		return x.TeamPrincipal
	}
	return ""
}

func (x *StoreTeamRequest) GetTeamEstablishedYear() string {
	if x != nil {
		return x.TeamEstablishedYear
	}
	return ""
}

func (x *StoreTeamRequest) GetTeamYearsActive() string {
	if x != nil {
		return x.TeamYearsActive
	}
	return ""
}

type StoreTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *StoreTeamResponse) Reset() {
	*x = StoreTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTeamResponse) ProtoMessage() {}

func (x *StoreTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTeamResponse.ProtoReflect.Descriptor instead.
func (*StoreTeamResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{9}
}

func (x *StoreTeamResponse) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type SearchTeamByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName string `protobuf:"bytes,1,opt,name=teamName,proto3" json:"teamName,omitempty"`
}

func (x *SearchTeamByNameRequest) Reset() {
	*x = SearchTeamByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTeamByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTeamByNameRequest) ProtoMessage() {}

func (x *SearchTeamByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTeamByNameRequest.ProtoReflect.Descriptor instead.
func (*SearchTeamByNameRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{10}
}

func (x *SearchTeamByNameRequest) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type SearchTeamByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *SearchTeamByNameResponse) Reset() {
	*x = SearchTeamByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTeamByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTeamByNameResponse) ProtoMessage() {}

func (x *SearchTeamByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTeamByNameResponse.ProtoReflect.Descriptor instead.
func (*SearchTeamByNameResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{11}
}

func (x *SearchTeamByNameResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamID string `protobuf:"bytes,1,opt,name=teamID,proto3" json:"teamID,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{12}
}

func (x *GetTeamRequest) GetTeamID() string {
	if x != nil {
		return x.TeamID
	}
	return ""
}

type GetTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *GetTeamResponse) Reset() {
	*x = GetTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamResponse) ProtoMessage() {}

func (x *GetTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamResponse.ProtoReflect.Descriptor instead.
func (*GetTeamResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{13}
}

func (x *GetTeamResponse) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type GrandPrixParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GrandPrixParticipant []*Driver `protobuf:"bytes,2,rep,name=grandPrixParticipant,proto3" json:"grandPrixParticipant,omitempty"`
	StartPosition        string    `protobuf:"bytes,3,opt,name=startPosition,proto3" json:"startPosition,omitempty"`
	FinishPosition       string    `protobuf:"bytes,4,opt,name=finishPosition,proto3" json:"finishPosition,omitempty"`
	PointsEarned         string    `protobuf:"bytes,5,opt,name=pointsEarned,proto3" json:"pointsEarned,omitempty"`
	RaceTime             string    `protobuf:"bytes,6,opt,name=raceTime,proto3" json:"raceTime,omitempty"`
	FastestLap           string    `protobuf:"bytes,7,opt,name=fastestLap,proto3" json:"fastestLap,omitempty"`
	GridPenalty          string    `protobuf:"bytes,8,opt,name=gridPenalty,proto3" json:"gridPenalty,omitempty"`
	TimePenalty          string    `protobuf:"bytes,9,opt,name=timePenalty,proto3" json:"timePenalty,omitempty"`
	StopGoPenalty        string    `protobuf:"bytes,10,opt,name=stopGoPenalty,proto3" json:"stopGoPenalty,omitempty"`
}

func (x *GrandPrixParticipant) Reset() {
	*x = GrandPrixParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrandPrixParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrandPrixParticipant) ProtoMessage() {}

func (x *GrandPrixParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrandPrixParticipant.ProtoReflect.Descriptor instead.
func (*GrandPrixParticipant) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{14}
}

func (x *GrandPrixParticipant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GrandPrixParticipant) GetGrandPrixParticipant() []*Driver {
	if x != nil {
		return x.GrandPrixParticipant
	}
	return nil
}

func (x *GrandPrixParticipant) GetStartPosition() string {
	if x != nil {
		return x.StartPosition
	}
	return ""
}

func (x *GrandPrixParticipant) GetFinishPosition() string {
	if x != nil {
		return x.FinishPosition
	}
	return ""
}

func (x *GrandPrixParticipant) GetPointsEarned() string {
	if x != nil {
		return x.PointsEarned
	}
	return ""
}

func (x *GrandPrixParticipant) GetRaceTime() string {
	if x != nil {
		return x.RaceTime
	}
	return ""
}

func (x *GrandPrixParticipant) GetFastestLap() string {
	if x != nil {
		return x.FastestLap
	}
	return ""
}

func (x *GrandPrixParticipant) GetGridPenalty() string {
	if x != nil {
		return x.GridPenalty
	}
	return ""
}

func (x *GrandPrixParticipant) GetTimePenalty() string {
	if x != nil {
		return x.TimePenalty
	}
	return ""
}

func (x *GrandPrixParticipant) GetStopGoPenalty() string {
	if x != nil {
		return x.StopGoPenalty
	}
	return ""
}

type GrandPrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GrandPrixName         string                  `protobuf:"bytes,2,opt,name=grandPrixName,proto3" json:"grandPrixName,omitempty"`
	GrandPrixTrack        string                  `protobuf:"bytes,3,opt,name=grandPrixTrack,proto3" json:"grandPrixTrack,omitempty"`
	GrandPrixDate         string                  `protobuf:"bytes,4,opt,name=grandPrixDate,proto3" json:"grandPrixDate,omitempty"`
	GrandPrixParticipants []*GrandPrixParticipant `protobuf:"bytes,5,rep,name=grandPrixParticipants,proto3" json:"grandPrixParticipants,omitempty"`
}

func (x *GrandPrix) Reset() {
	*x = GrandPrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrandPrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrandPrix) ProtoMessage() {}

func (x *GrandPrix) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrandPrix.ProtoReflect.Descriptor instead.
func (*GrandPrix) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{15}
}

func (x *GrandPrix) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GrandPrix) GetGrandPrixName() string {
	if x != nil {
		return x.GrandPrixName
	}
	return ""
}

func (x *GrandPrix) GetGrandPrixTrack() string {
	if x != nil {
		return x.GrandPrixTrack
	}
	return ""
}

func (x *GrandPrix) GetGrandPrixDate() string {
	if x != nil {
		return x.GrandPrixDate
	}
	return ""
}

func (x *GrandPrix) GetGrandPrixParticipants() []*GrandPrixParticipant {
	if x != nil {
		return x.GrandPrixParticipants
	}
	return nil
}

type StoreGrandPrixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrixName         string                  `protobuf:"bytes,1,opt,name=grandPrixName,proto3" json:"grandPrixName,omitempty"`
	GrandPrixTrack        string                  `protobuf:"bytes,2,opt,name=grandPrixTrack,proto3" json:"grandPrixTrack,omitempty"`
	GrandPrixDate         string                  `protobuf:"bytes,3,opt,name=grandPrixDate,proto3" json:"grandPrixDate,omitempty"`
	GrandPrixParticipants []*GrandPrixParticipant `protobuf:"bytes,4,rep,name=grandPrixParticipants,proto3" json:"grandPrixParticipants,omitempty"`
}

func (x *StoreGrandPrixRequest) Reset() {
	*x = StoreGrandPrixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreGrandPrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreGrandPrixRequest) ProtoMessage() {}

func (x *StoreGrandPrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreGrandPrixRequest.ProtoReflect.Descriptor instead.
func (*StoreGrandPrixRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{16}
}

func (x *StoreGrandPrixRequest) GetGrandPrixName() string {
	if x != nil {
		return x.GrandPrixName
	}
	return ""
}

func (x *StoreGrandPrixRequest) GetGrandPrixTrack() string {
	if x != nil {
		return x.GrandPrixTrack
	}
	return ""
}

func (x *StoreGrandPrixRequest) GetGrandPrixDate() string {
	if x != nil {
		return x.GrandPrixDate
	}
	return ""
}

func (x *StoreGrandPrixRequest) GetGrandPrixParticipants() []*GrandPrixParticipant {
	if x != nil {
		return x.GrandPrixParticipants
	}
	return nil
}

type StoreGrandPrixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrix *GrandPrix `protobuf:"bytes,1,opt,name=grandPrix,proto3" json:"grandPrix,omitempty"`
}

func (x *StoreGrandPrixResponse) Reset() {
	*x = StoreGrandPrixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreGrandPrixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreGrandPrixResponse) ProtoMessage() {}

func (x *StoreGrandPrixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreGrandPrixResponse.ProtoReflect.Descriptor instead.
func (*StoreGrandPrixResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{17}
}

func (x *StoreGrandPrixResponse) GetGrandPrix() *GrandPrix {
	if x != nil {
		return x.GrandPrix
	}
	return nil
}

type GetGrandPrixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrixID string `protobuf:"bytes,1,opt,name=grandPrixID,proto3" json:"grandPrixID,omitempty"`
}

func (x *GetGrandPrixRequest) Reset() {
	*x = GetGrandPrixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGrandPrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGrandPrixRequest) ProtoMessage() {}

func (x *GetGrandPrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGrandPrixRequest.ProtoReflect.Descriptor instead.
func (*GetGrandPrixRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{18}
}

func (x *GetGrandPrixRequest) GetGrandPrixID() string {
	if x != nil {
		return x.GrandPrixID
	}
	return ""
}

type GetGrandPrixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrix *GrandPrix `protobuf:"bytes,1,opt,name=grandPrix,proto3" json:"grandPrix,omitempty"`
}

func (x *GetGrandPrixResponse) Reset() {
	*x = GetGrandPrixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGrandPrixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGrandPrixResponse) ProtoMessage() {}

func (x *GetGrandPrixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGrandPrixResponse.ProtoReflect.Descriptor instead.
func (*GetGrandPrixResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{19}
}

func (x *GetGrandPrixResponse) GetGrandPrix() *GrandPrix {
	if x != nil {
		return x.GrandPrix
	}
	return nil
}

type SearchGrandPrixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrixName string `protobuf:"bytes,1,opt,name=grandPrixName,proto3" json:"grandPrixName,omitempty"` // Can I put more strings as valid inputs or are those separate funcs?
}

func (x *SearchGrandPrixRequest) Reset() {
	*x = SearchGrandPrixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGrandPrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGrandPrixRequest) ProtoMessage() {}

func (x *SearchGrandPrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGrandPrixRequest.ProtoReflect.Descriptor instead.
func (*SearchGrandPrixRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{20}
}

func (x *SearchGrandPrixRequest) GetGrandPrixName() string {
	if x != nil {
		return x.GrandPrixName
	}
	return ""
}

type SearchGrandPrixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrixs []*GrandPrix `protobuf:"bytes,1,rep,name=grandPrixs,proto3" json:"grandPrixs,omitempty"`
}

func (x *SearchGrandPrixResponse) Reset() {
	*x = SearchGrandPrixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchGrandPrixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchGrandPrixResponse) ProtoMessage() {}

func (x *SearchGrandPrixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchGrandPrixResponse.ProtoReflect.Descriptor instead.
func (*SearchGrandPrixResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{21}
}

func (x *SearchGrandPrixResponse) GetGrandPrixs() []*GrandPrix {
	if x != nil {
		return x.GrandPrixs
	}
	return nil
}

type QualifyingParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GrandPrixParticipant []*Driver `protobuf:"bytes,2,rep,name=grandPrixParticipant,proto3" json:"grandPrixParticipant,omitempty"`
	QualifiedPosition    string    `protobuf:"bytes,3,opt,name=qualifiedPosition,proto3" json:"qualifiedPosition,omitempty"`
	FastestLap           string    `protobuf:"bytes,4,opt,name=fastestLap,proto3" json:"fastestLap,omitempty"`
	StartTireChoice      string    `protobuf:"bytes,5,opt,name=startTireChoice,proto3" json:"startTireChoice,omitempty"`
	BestRoundCompleted   string    `protobuf:"bytes,6,opt,name=bestRoundCompleted,proto3" json:"bestRoundCompleted,omitempty"`
}

func (x *QualifyingParticipant) Reset() {
	*x = QualifyingParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifyingParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifyingParticipant) ProtoMessage() {}

func (x *QualifyingParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifyingParticipant.ProtoReflect.Descriptor instead.
func (*QualifyingParticipant) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{22}
}

func (x *QualifyingParticipant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QualifyingParticipant) GetGrandPrixParticipant() []*Driver {
	if x != nil {
		return x.GrandPrixParticipant
	}
	return nil
}

func (x *QualifyingParticipant) GetQualifiedPosition() string {
	if x != nil {
		return x.QualifiedPosition
	}
	return ""
}

func (x *QualifyingParticipant) GetFastestLap() string {
	if x != nil {
		return x.FastestLap
	}
	return ""
}

func (x *QualifyingParticipant) GetStartTireChoice() string {
	if x != nil {
		return x.StartTireChoice
	}
	return ""
}

func (x *QualifyingParticipant) GetBestRoundCompleted() string {
	if x != nil {
		return x.BestRoundCompleted
	}
	return ""
}

type Qualifying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QualifyingGrandPrixName  string                   `protobuf:"bytes,2,opt,name=qualifyingGrandPrixName,proto3" json:"qualifyingGrandPrixName,omitempty"`
	QualifyingGrandPrixTrack string                   `protobuf:"bytes,3,opt,name=qualifyingGrandPrixTrack,proto3" json:"qualifyingGrandPrixTrack,omitempty"`
	QualifyingDate           string                   `protobuf:"bytes,4,opt,name=qualifyingDate,proto3" json:"qualifyingDate,omitempty"`
	QualifyingParticipants   []*QualifyingParticipant `protobuf:"bytes,5,rep,name=qualifyingParticipants,proto3" json:"qualifyingParticipants,omitempty"`
}

func (x *Qualifying) Reset() {
	*x = Qualifying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qualifying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qualifying) ProtoMessage() {}

func (x *Qualifying) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qualifying.ProtoReflect.Descriptor instead.
func (*Qualifying) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{23}
}

func (x *Qualifying) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Qualifying) GetQualifyingGrandPrixName() string {
	if x != nil {
		return x.QualifyingGrandPrixName
	}
	return ""
}

func (x *Qualifying) GetQualifyingGrandPrixTrack() string {
	if x != nil {
		return x.QualifyingGrandPrixTrack
	}
	return ""
}

func (x *Qualifying) GetQualifyingDate() string {
	if x != nil {
		return x.QualifyingDate
	}
	return ""
}

func (x *Qualifying) GetQualifyingParticipants() []*QualifyingParticipant {
	if x != nil {
		return x.QualifyingParticipants
	}
	return nil
}

type StoreQualifyingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifyingGrandPrixName  string                   `protobuf:"bytes,1,opt,name=qualifyingGrandPrixName,proto3" json:"qualifyingGrandPrixName,omitempty"`
	QualifyingGrandPrixTrack string                   `protobuf:"bytes,2,opt,name=qualifyingGrandPrixTrack,proto3" json:"qualifyingGrandPrixTrack,omitempty"`
	QualifyingDate           string                   `protobuf:"bytes,3,opt,name=qualifyingDate,proto3" json:"qualifyingDate,omitempty"`
	QualifyingParticipants   []*QualifyingParticipant `protobuf:"bytes,4,rep,name=qualifyingParticipants,proto3" json:"qualifyingParticipants,omitempty"`
}

func (x *StoreQualifyingRequest) Reset() {
	*x = StoreQualifyingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreQualifyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreQualifyingRequest) ProtoMessage() {}

func (x *StoreQualifyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreQualifyingRequest.ProtoReflect.Descriptor instead.
func (*StoreQualifyingRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{24}
}

func (x *StoreQualifyingRequest) GetQualifyingGrandPrixName() string {
	if x != nil {
		return x.QualifyingGrandPrixName
	}
	return ""
}

func (x *StoreQualifyingRequest) GetQualifyingGrandPrixTrack() string {
	if x != nil {
		return x.QualifyingGrandPrixTrack
	}
	return ""
}

func (x *StoreQualifyingRequest) GetQualifyingDate() string {
	if x != nil {
		return x.QualifyingDate
	}
	return ""
}

func (x *StoreQualifyingRequest) GetQualifyingParticipants() []*QualifyingParticipant {
	if x != nil {
		return x.QualifyingParticipants
	}
	return nil
}

type StoreQualifyingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifying *Qualifying `protobuf:"bytes,1,opt,name=qualifying,proto3" json:"qualifying,omitempty"`
}

func (x *StoreQualifyingResponse) Reset() {
	*x = StoreQualifyingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreQualifyingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreQualifyingResponse) ProtoMessage() {}

func (x *StoreQualifyingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreQualifyingResponse.ProtoReflect.Descriptor instead.
func (*StoreQualifyingResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{25}
}

func (x *StoreQualifyingResponse) GetQualifying() *Qualifying {
	if x != nil {
		return x.Qualifying
	}
	return nil
}

type GetQualifyingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifyingID string `protobuf:"bytes,1,opt,name=qualifyingID,proto3" json:"qualifyingID,omitempty"`
}

func (x *GetQualifyingRequest) Reset() {
	*x = GetQualifyingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQualifyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualifyingRequest) ProtoMessage() {}

func (x *GetQualifyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualifyingRequest.ProtoReflect.Descriptor instead.
func (*GetQualifyingRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{26}
}

func (x *GetQualifyingRequest) GetQualifyingID() string {
	if x != nil {
		return x.QualifyingID
	}
	return ""
}

type GetQualifyingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifying *Qualifying `protobuf:"bytes,1,opt,name=qualifying,proto3" json:"qualifying,omitempty"`
}

func (x *GetQualifyingResponse) Reset() {
	*x = GetQualifyingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQualifyingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualifyingResponse) ProtoMessage() {}

func (x *GetQualifyingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualifyingResponse.ProtoReflect.Descriptor instead.
func (*GetQualifyingResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{27}
}

func (x *GetQualifyingResponse) GetQualifying() *Qualifying {
	if x != nil {
		return x.Qualifying
	}
	return nil
}

type SearchQualifyingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualifyingGrandPrixName string `protobuf:"bytes,1,opt,name=qualifyingGrandPrixName,proto3" json:"qualifyingGrandPrixName,omitempty"`
}

func (x *SearchQualifyingRequest) Reset() {
	*x = SearchQualifyingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQualifyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQualifyingRequest) ProtoMessage() {}

func (x *SearchQualifyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQualifyingRequest.ProtoReflect.Descriptor instead.
func (*SearchQualifyingRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{28}
}

func (x *SearchQualifyingRequest) GetQualifyingGrandPrixName() string {
	if x != nil {
		return x.QualifyingGrandPrixName
	}
	return ""
}

type SearchQualifyingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifyings []*Qualifying `protobuf:"bytes,1,rep,name=qualifyings,proto3" json:"qualifyings,omitempty"`
}

func (x *SearchQualifyingResponse) Reset() {
	*x = SearchQualifyingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQualifyingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQualifyingResponse) ProtoMessage() {}

func (x *SearchQualifyingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQualifyingResponse.ProtoReflect.Descriptor instead.
func (*SearchQualifyingResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{29}
}

func (x *SearchQualifyingResponse) GetQualifyings() []*Qualifying {
	if x != nil {
		return x.Qualifyings
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrackName            string `protobuf:"bytes,2,opt,name=trackName,proto3" json:"trackName,omitempty"`
	TrackCountry         string `protobuf:"bytes,3,opt,name=trackCountry,proto3" json:"trackCountry,omitempty"`
	LapDistance          string `protobuf:"bytes,4,opt,name=lapDistance,proto3" json:"lapDistance,omitempty"`
	LapCount             string `protobuf:"bytes,5,opt,name=lapCount,proto3" json:"lapCount,omitempty"`
	LeftTurnCount        string `protobuf:"bytes,6,opt,name=leftTurnCount,proto3" json:"leftTurnCount,omitempty"`
	RightTurnCount       string `protobuf:"bytes,7,opt,name=rightTurnCount,proto3" json:"rightTurnCount,omitempty"`
	DrsZoneCount         string `protobuf:"bytes,8,opt,name=drsZoneCount,proto3" json:"drsZoneCount,omitempty"`
	TotalElevationChange string `protobuf:"bytes,9,opt,name=totalElevationChange,proto3" json:"totalElevationChange,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{30}
}

func (x *Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Track) GetTrackName() string {
	if x != nil {
		return x.TrackName
	}
	return ""
}

func (x *Track) GetTrackCountry() string {
	if x != nil {
		return x.TrackCountry
	}
	return ""
}

func (x *Track) GetLapDistance() string {
	if x != nil {
		return x.LapDistance
	}
	return ""
}

func (x *Track) GetLapCount() string {
	if x != nil {
		return x.LapCount
	}
	return ""
}

func (x *Track) GetLeftTurnCount() string {
	if x != nil {
		return x.LeftTurnCount
	}
	return ""
}

func (x *Track) GetRightTurnCount() string {
	if x != nil {
		return x.RightTurnCount
	}
	return ""
}

func (x *Track) GetDrsZoneCount() string {
	if x != nil {
		return x.DrsZoneCount
	}
	return ""
}

func (x *Track) GetTotalElevationChange() string {
	if x != nil {
		return x.TotalElevationChange
	}
	return ""
}

type StoreTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackName            string `protobuf:"bytes,1,opt,name=trackName,proto3" json:"trackName,omitempty"`
	TrackCountry         string `protobuf:"bytes,2,opt,name=trackCountry,proto3" json:"trackCountry,omitempty"`
	LapDistance          string `protobuf:"bytes,3,opt,name=lapDistance,proto3" json:"lapDistance,omitempty"`
	LapCount             string `protobuf:"bytes,4,opt,name=lapCount,proto3" json:"lapCount,omitempty"`
	LeftTurnCount        string `protobuf:"bytes,5,opt,name=leftTurnCount,proto3" json:"leftTurnCount,omitempty"`
	RightTurnCount       string `protobuf:"bytes,6,opt,name=rightTurnCount,proto3" json:"rightTurnCount,omitempty"`
	DrsZoneCount         string `protobuf:"bytes,7,opt,name=drsZoneCount,proto3" json:"drsZoneCount,omitempty"`
	TotalElevationChange string `protobuf:"bytes,8,opt,name=totalElevationChange,proto3" json:"totalElevationChange,omitempty"`
}

func (x *StoreTrackRequest) Reset() {
	*x = StoreTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTrackRequest) ProtoMessage() {}

func (x *StoreTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTrackRequest.ProtoReflect.Descriptor instead.
func (*StoreTrackRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{31}
}

func (x *StoreTrackRequest) GetTrackName() string {
	if x != nil {
		return x.TrackName
	}
	return ""
}

func (x *StoreTrackRequest) GetTrackCountry() string {
	if x != nil {
		return x.TrackCountry
	}
	return ""
}

func (x *StoreTrackRequest) GetLapDistance() string {
	if x != nil {
		return x.LapDistance
	}
	return ""
}

func (x *StoreTrackRequest) GetLapCount() string {
	if x != nil {
		return x.LapCount
	}
	return ""
}

func (x *StoreTrackRequest) GetLeftTurnCount() string {
	if x != nil {
		return x.LeftTurnCount
	}
	return ""
}

func (x *StoreTrackRequest) GetRightTurnCount() string {
	if x != nil {
		return x.RightTurnCount
	}
	return ""
}

func (x *StoreTrackRequest) GetDrsZoneCount() string {
	if x != nil {
		return x.DrsZoneCount
	}
	return ""
}

func (x *StoreTrackRequest) GetTotalElevationChange() string {
	if x != nil {
		return x.TotalElevationChange
	}
	return ""
}

type StoreTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track *Track `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *StoreTrackResponse) Reset() {
	*x = StoreTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTrackResponse) ProtoMessage() {}

func (x *StoreTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTrackResponse.ProtoReflect.Descriptor instead.
func (*StoreTrackResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{32}
}

func (x *StoreTrackResponse) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type GetTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTrackRequest) Reset() {
	*x = GetTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrackRequest) ProtoMessage() {}

func (x *GetTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrackRequest.ProtoReflect.Descriptor instead.
func (*GetTrackRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{33}
}

func (x *GetTrackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track *Track `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *GetTrackResponse) Reset() {
	*x = GetTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrackResponse) ProtoMessage() {}

func (x *GetTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrackResponse.ProtoReflect.Descriptor instead.
func (*GetTrackResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{34}
}

func (x *GetTrackResponse) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

type SearchTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackCountry string `protobuf:"bytes,1,opt,name=trackCountry,proto3" json:"trackCountry,omitempty"`
}

func (x *SearchTrackRequest) Reset() {
	*x = SearchTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTrackRequest) ProtoMessage() {}

func (x *SearchTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTrackRequest.ProtoReflect.Descriptor instead.
func (*SearchTrackRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{35}
}

func (x *SearchTrackRequest) GetTrackCountry() string {
	if x != nil {
		return x.TrackCountry
	}
	return ""
}

type SearchTrackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*Track `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *SearchTrackResponse) Reset() {
	*x = SearchTrackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTrackResponse) ProtoMessage() {}

func (x *SearchTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTrackResponse.ProtoReflect.Descriptor instead.
func (*SearchTrackResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{36}
}

func (x *SearchTrackResponse) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoundNumber string      `protobuf:"bytes,2,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
	RoundDate   string      `protobuf:"bytes,3,opt,name=roundDate,proto3" json:"roundDate,omitempty"`
	RoundYear   string      `protobuf:"bytes,4,opt,name=roundYear,proto3" json:"roundYear,omitempty"`
	Track       *Track      `protobuf:"bytes,5,opt,name=track,proto3" json:"track,omitempty"`
	Qualifying  *Qualifying `protobuf:"bytes,6,opt,name=qualifying,proto3" json:"qualifying,omitempty"`
	GrandPrix   *GrandPrix  `protobuf:"bytes,7,opt,name=grandPrix,proto3" json:"grandPrix,omitempty"`
}

func (x *Round) Reset() {
	*x = Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{37}
}

func (x *Round) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Round) GetRoundNumber() string {
	if x != nil {
		return x.RoundNumber
	}
	return ""
}

func (x *Round) GetRoundDate() string {
	if x != nil {
		return x.RoundDate
	}
	return ""
}

func (x *Round) GetRoundYear() string {
	if x != nil {
		return x.RoundYear
	}
	return ""
}

func (x *Round) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *Round) GetQualifying() *Qualifying {
	if x != nil {
		return x.Qualifying
	}
	return nil
}

func (x *Round) GetGrandPrix() *GrandPrix {
	if x != nil {
		return x.GrandPrix
	}
	return nil
}

type StoreRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber string      `protobuf:"bytes,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
	RoundDate   string      `protobuf:"bytes,2,opt,name=roundDate,proto3" json:"roundDate,omitempty"`
	Track       *Track      `protobuf:"bytes,3,opt,name=track,proto3" json:"track,omitempty"`
	Qualifying  *Qualifying `protobuf:"bytes,4,opt,name=qualifying,proto3" json:"qualifying,omitempty"`
	GrandPrix   *GrandPrix  `protobuf:"bytes,5,opt,name=grandPrix,proto3" json:"grandPrix,omitempty"`
}

func (x *StoreRoundRequest) Reset() {
	*x = StoreRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRoundRequest) ProtoMessage() {}

func (x *StoreRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRoundRequest.ProtoReflect.Descriptor instead.
func (*StoreRoundRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{38}
}

func (x *StoreRoundRequest) GetRoundNumber() string {
	if x != nil {
		return x.RoundNumber
	}
	return ""
}

func (x *StoreRoundRequest) GetRoundDate() string {
	if x != nil {
		return x.RoundDate
	}
	return ""
}

func (x *StoreRoundRequest) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *StoreRoundRequest) GetQualifying() *Qualifying {
	if x != nil {
		return x.Qualifying
	}
	return nil
}

func (x *StoreRoundRequest) GetGrandPrix() *GrandPrix {
	if x != nil {
		return x.GrandPrix
	}
	return nil
}

type StoreRoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round *Round `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *StoreRoundResponse) Reset() {
	*x = StoreRoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRoundResponse) ProtoMessage() {}

func (x *StoreRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRoundResponse.ProtoReflect.Descriptor instead.
func (*StoreRoundResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{39}
}

func (x *StoreRoundResponse) GetRound() *Round {
	if x != nil {
		return x.Round
	}
	return nil
}

type GetRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRoundRequest) Reset() {
	*x = GetRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundRequest) ProtoMessage() {}

func (x *GetRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundRequest.ProtoReflect.Descriptor instead.
func (*GetRoundRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{40}
}

func (x *GetRoundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round *Round `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *GetRoundResponse) Reset() {
	*x = GetRoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundResponse) ProtoMessage() {}

func (x *GetRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundResponse.ProtoReflect.Descriptor instead.
func (*GetRoundResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{41}
}

func (x *GetRoundResponse) GetRound() *Round {
	if x != nil {
		return x.Round
	}
	return nil
}

type SearchRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber string `protobuf:"bytes,1,opt,name=roundNumber,proto3" json:"roundNumber,omitempty"`
}

func (x *SearchRoundRequest) Reset() {
	*x = SearchRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRoundRequest) ProtoMessage() {}

func (x *SearchRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRoundRequest.ProtoReflect.Descriptor instead.
func (*SearchRoundRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{42}
}

func (x *SearchRoundRequest) GetRoundNumber() string {
	if x != nil {
		return x.RoundNumber
	}
	return ""
}

type SearchRoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds []*Round `protobuf:"bytes,1,rep,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *SearchRoundResponse) Reset() {
	*x = SearchRoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRoundResponse) ProtoMessage() {}

func (x *SearchRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRoundResponse.ProtoReflect.Descriptor instead.
func (*SearchRoundResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{43}
}

func (x *SearchRoundResponse) GetRounds() []*Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeasonYear           string                  `protobuf:"bytes,2,opt,name=seasonYear,proto3" json:"seasonYear,omitempty"`
	Round                []*Round                `protobuf:"bytes,3,rep,name=round,proto3" json:"round,omitempty"`
	Team                 []*Team                 `protobuf:"bytes,4,rep,name=team,proto3" json:"team,omitempty"`
	GrandPrixParticipant []*GrandPrixParticipant `protobuf:"bytes,5,rep,name=grandPrixParticipant,proto3" json:"grandPrixParticipant,omitempty"`
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{44}
}

func (x *Season) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Season) GetSeasonYear() string {
	if x != nil {
		return x.SeasonYear
	}
	return ""
}

func (x *Season) GetRound() []*Round {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *Season) GetTeam() []*Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Season) GetGrandPrixParticipant() []*GrandPrixParticipant {
	if x != nil {
		return x.GrandPrixParticipant
	}
	return nil
}

type StoreSeasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonYear           string                  `protobuf:"bytes,1,opt,name=seasonYear,proto3" json:"seasonYear,omitempty"`
	Round                []*Round                `protobuf:"bytes,2,rep,name=round,proto3" json:"round,omitempty"`
	Team                 []*Team                 `protobuf:"bytes,4,rep,name=team,proto3" json:"team,omitempty"`
	GrandPrixParticipant []*GrandPrixParticipant `protobuf:"bytes,5,rep,name=grandPrixParticipant,proto3" json:"grandPrixParticipant,omitempty"`
}

func (x *StoreSeasonRequest) Reset() {
	*x = StoreSeasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSeasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSeasonRequest) ProtoMessage() {}

func (x *StoreSeasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSeasonRequest.ProtoReflect.Descriptor instead.
func (*StoreSeasonRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{45}
}

func (x *StoreSeasonRequest) GetSeasonYear() string {
	if x != nil {
		return x.SeasonYear
	}
	return ""
}

func (x *StoreSeasonRequest) GetRound() []*Round {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *StoreSeasonRequest) GetTeam() []*Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *StoreSeasonRequest) GetGrandPrixParticipant() []*GrandPrixParticipant {
	if x != nil {
		return x.GrandPrixParticipant
	}
	return nil
}

type StoreSeasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season *Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *StoreSeasonResponse) Reset() {
	*x = StoreSeasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSeasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSeasonResponse) ProtoMessage() {}

func (x *StoreSeasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSeasonResponse.ProtoReflect.Descriptor instead.
func (*StoreSeasonResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{46}
}

func (x *StoreSeasonResponse) GetSeason() *Season {
	if x != nil {
		return x.Season
	}
	return nil
}

type GetSeasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSeasonRequest) Reset() {
	*x = GetSeasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeasonRequest) ProtoMessage() {}

func (x *GetSeasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeasonRequest.ProtoReflect.Descriptor instead.
func (*GetSeasonRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{47}
}

func (x *GetSeasonRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSeasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season *Season `protobuf:"bytes,1,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *GetSeasonResponse) Reset() {
	*x = GetSeasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeasonResponse) ProtoMessage() {}

func (x *GetSeasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeasonResponse.ProtoReflect.Descriptor instead.
func (*GetSeasonResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{48}
}

func (x *GetSeasonResponse) GetSeason() *Season {
	if x != nil {
		return x.Season
	}
	return nil
}

type SearchSeasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonYear string `protobuf:"bytes,1,opt,name=seasonYear,proto3" json:"seasonYear,omitempty"`
}

func (x *SearchSeasonRequest) Reset() {
	*x = SearchSeasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSeasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSeasonRequest) ProtoMessage() {}

func (x *SearchSeasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSeasonRequest.ProtoReflect.Descriptor instead.
func (*SearchSeasonRequest) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{49}
}

func (x *SearchSeasonRequest) GetSeasonYear() string {
	if x != nil {
		return x.SeasonYear
	}
	return ""
}

type SearchSeasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seasons []*Season `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *SearchSeasonResponse) Reset() {
	*x = SearchSeasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivertracker_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSeasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSeasonResponse) ProtoMessage() {}

func (x *SearchSeasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_drivertracker_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSeasonResponse.ProtoReflect.Descriptor instead.
func (*SearchSeasonResponse) Descriptor() ([]byte, []int) {
	return file_drivertracker_proto_rawDescGZIP(), []int{50}
}

func (x *SearchSeasonResponse) GetSeasons() []*Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

var File_drivertracker_proto protoreflect.FileDescriptor

var file_drivertracker_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0xa4,
	0x01, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x13, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65,
	0x61, 0x6d, 0x59, 0x65, 0x61, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x59, 0x65, 0x61, 0x72, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x35, 0x0a, 0x17,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x44,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x22, 0x93, 0x03, 0x0a, 0x14, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a,
	0x14, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x14, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x47, 0x6f, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x70, 0x47, 0x6f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x09, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x15,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x15, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78,
	0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x78, 0x22, 0x3e, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x78, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x14,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x14, 0x67, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x26,
	0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9e,
	0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x26, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x16, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22,
	0x5e, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x22,
	0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61,
	0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xbd, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x72, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x70,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x66, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c,
	0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4a, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x38, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x4d, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0xb2, 0x02, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x43, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x78, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x43, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x22, 0x4a, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0x36, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x61, 0x0a, 0x14, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x80,
	0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x61,
	0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x14, 0x67, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x22, 0x51, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x32, 0xdc, 0x11,
	0x0a, 0x10, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x41,
	0x50, 0x49, 0x12, 0x68, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x12, 0x2e, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x12, 0x2c, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x12, 0x2f, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x28, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x28, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2c, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x55, 0x5a, 0x53,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6d, 0x69,
	0x74, 0x62, 0x69, 0x6c, 0x6c, 0x79, 0x30, 0x6e, 0x65, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x61, 0x70, 0x69, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drivertracker_proto_rawDescOnce sync.Once
	file_drivertracker_proto_rawDescData = file_drivertracker_proto_rawDesc
)

func file_drivertracker_proto_rawDescGZIP() []byte {
	file_drivertracker_proto_rawDescOnce.Do(func() {
		file_drivertracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_drivertracker_proto_rawDescData)
	})
	return file_drivertracker_proto_rawDescData
}

var file_drivertracker_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_drivertracker_proto_goTypes = []interface{}{
	(*Driver)(nil),                   // 0: drivertracker.api.alpha.Driver
	(*StoreDriverRequest)(nil),       // 1: drivertracker.api.alpha.StoreDriverRequest
	(*StoreDriverResponse)(nil),      // 2: drivertracker.api.alpha.StoreDriverResponse
	(*GetDriverRequest)(nil),         // 3: drivertracker.api.alpha.GetDriverRequest
	(*GetDriverResponse)(nil),        // 4: drivertracker.api.alpha.GetDriverResponse
	(*SearchDriverRequest)(nil),      // 5: drivertracker.api.alpha.SearchDriverRequest
	(*SearchDriverResponse)(nil),     // 6: drivertracker.api.alpha.SearchDriverResponse
	(*Team)(nil),                     // 7: drivertracker.api.alpha.Team
	(*StoreTeamRequest)(nil),         // 8: drivertracker.api.alpha.StoreTeamRequest
	(*StoreTeamResponse)(nil),        // 9: drivertracker.api.alpha.StoreTeamResponse
	(*SearchTeamByNameRequest)(nil),  // 10: drivertracker.api.alpha.SearchTeamByNameRequest
	(*SearchTeamByNameResponse)(nil), // 11: drivertracker.api.alpha.SearchTeamByNameResponse
	(*GetTeamRequest)(nil),           // 12: drivertracker.api.alpha.GetTeamRequest
	(*GetTeamResponse)(nil),          // 13: drivertracker.api.alpha.GetTeamResponse
	(*GrandPrixParticipant)(nil),     // 14: drivertracker.api.alpha.GrandPrixParticipant
	(*GrandPrix)(nil),                // 15: drivertracker.api.alpha.GrandPrix
	(*StoreGrandPrixRequest)(nil),    // 16: drivertracker.api.alpha.StoreGrandPrixRequest
	(*StoreGrandPrixResponse)(nil),   // 17: drivertracker.api.alpha.StoreGrandPrixResponse
	(*GetGrandPrixRequest)(nil),      // 18: drivertracker.api.alpha.GetGrandPrixRequest
	(*GetGrandPrixResponse)(nil),     // 19: drivertracker.api.alpha.GetGrandPrixResponse
	(*SearchGrandPrixRequest)(nil),   // 20: drivertracker.api.alpha.SearchGrandPrixRequest
	(*SearchGrandPrixResponse)(nil),  // 21: drivertracker.api.alpha.SearchGrandPrixResponse
	(*QualifyingParticipant)(nil),    // 22: drivertracker.api.alpha.QualifyingParticipant
	(*Qualifying)(nil),               // 23: drivertracker.api.alpha.Qualifying
	(*StoreQualifyingRequest)(nil),   // 24: drivertracker.api.alpha.StoreQualifyingRequest
	(*StoreQualifyingResponse)(nil),  // 25: drivertracker.api.alpha.StoreQualifyingResponse
	(*GetQualifyingRequest)(nil),     // 26: drivertracker.api.alpha.GetQualifyingRequest
	(*GetQualifyingResponse)(nil),    // 27: drivertracker.api.alpha.GetQualifyingResponse
	(*SearchQualifyingRequest)(nil),  // 28: drivertracker.api.alpha.SearchQualifyingRequest
	(*SearchQualifyingResponse)(nil), // 29: drivertracker.api.alpha.SearchQualifyingResponse
	(*Track)(nil),                    // 30: drivertracker.api.alpha.Track
	(*StoreTrackRequest)(nil),        // 31: drivertracker.api.alpha.StoreTrackRequest
	(*StoreTrackResponse)(nil),       // 32: drivertracker.api.alpha.StoreTrackResponse
	(*GetTrackRequest)(nil),          // 33: drivertracker.api.alpha.GetTrackRequest
	(*GetTrackResponse)(nil),         // 34: drivertracker.api.alpha.GetTrackResponse
	(*SearchTrackRequest)(nil),       // 35: drivertracker.api.alpha.SearchTrackRequest
	(*SearchTrackResponse)(nil),      // 36: drivertracker.api.alpha.SearchTrackResponse
	(*Round)(nil),                    // 37: drivertracker.api.alpha.Round
	(*StoreRoundRequest)(nil),        // 38: drivertracker.api.alpha.StoreRoundRequest
	(*StoreRoundResponse)(nil),       // 39: drivertracker.api.alpha.StoreRoundResponse
	(*GetRoundRequest)(nil),          // 40: drivertracker.api.alpha.GetRoundRequest
	(*GetRoundResponse)(nil),         // 41: drivertracker.api.alpha.GetRoundResponse
	(*SearchRoundRequest)(nil),       // 42: drivertracker.api.alpha.SearchRoundRequest
	(*SearchRoundResponse)(nil),      // 43: drivertracker.api.alpha.SearchRoundResponse
	(*Season)(nil),                   // 44: drivertracker.api.alpha.Season
	(*StoreSeasonRequest)(nil),       // 45: drivertracker.api.alpha.StoreSeasonRequest
	(*StoreSeasonResponse)(nil),      // 46: drivertracker.api.alpha.StoreSeasonResponse
	(*GetSeasonRequest)(nil),         // 47: drivertracker.api.alpha.GetSeasonRequest
	(*GetSeasonResponse)(nil),        // 48: drivertracker.api.alpha.GetSeasonResponse
	(*SearchSeasonRequest)(nil),      // 49: drivertracker.api.alpha.SearchSeasonRequest
	(*SearchSeasonResponse)(nil),     // 50: drivertracker.api.alpha.SearchSeasonResponse
}
var file_drivertracker_proto_depIdxs = []int32{
	0,  // 0: drivertracker.api.alpha.StoreDriverResponse.driver:type_name -> drivertracker.api.alpha.Driver
	0,  // 1: drivertracker.api.alpha.GetDriverResponse.driver:type_name -> drivertracker.api.alpha.Driver
	0,  // 2: drivertracker.api.alpha.SearchDriverResponse.drivers:type_name -> drivertracker.api.alpha.Driver
	7,  // 3: drivertracker.api.alpha.StoreTeamResponse.team:type_name -> drivertracker.api.alpha.Team
	7,  // 4: drivertracker.api.alpha.SearchTeamByNameResponse.teams:type_name -> drivertracker.api.alpha.Team
	7,  // 5: drivertracker.api.alpha.GetTeamResponse.team:type_name -> drivertracker.api.alpha.Team
	0,  // 6: drivertracker.api.alpha.GrandPrixParticipant.grandPrixParticipant:type_name -> drivertracker.api.alpha.Driver
	14, // 7: drivertracker.api.alpha.GrandPrix.grandPrixParticipants:type_name -> drivertracker.api.alpha.GrandPrixParticipant
	14, // 8: drivertracker.api.alpha.StoreGrandPrixRequest.grandPrixParticipants:type_name -> drivertracker.api.alpha.GrandPrixParticipant
	15, // 9: drivertracker.api.alpha.StoreGrandPrixResponse.grandPrix:type_name -> drivertracker.api.alpha.GrandPrix
	15, // 10: drivertracker.api.alpha.GetGrandPrixResponse.grandPrix:type_name -> drivertracker.api.alpha.GrandPrix
	15, // 11: drivertracker.api.alpha.SearchGrandPrixResponse.grandPrixs:type_name -> drivertracker.api.alpha.GrandPrix
	0,  // 12: drivertracker.api.alpha.QualifyingParticipant.grandPrixParticipant:type_name -> drivertracker.api.alpha.Driver
	22, // 13: drivertracker.api.alpha.Qualifying.qualifyingParticipants:type_name -> drivertracker.api.alpha.QualifyingParticipant
	22, // 14: drivertracker.api.alpha.StoreQualifyingRequest.qualifyingParticipants:type_name -> drivertracker.api.alpha.QualifyingParticipant
	23, // 15: drivertracker.api.alpha.StoreQualifyingResponse.qualifying:type_name -> drivertracker.api.alpha.Qualifying
	23, // 16: drivertracker.api.alpha.GetQualifyingResponse.qualifying:type_name -> drivertracker.api.alpha.Qualifying
	23, // 17: drivertracker.api.alpha.SearchQualifyingResponse.qualifyings:type_name -> drivertracker.api.alpha.Qualifying
	30, // 18: drivertracker.api.alpha.StoreTrackResponse.track:type_name -> drivertracker.api.alpha.Track
	30, // 19: drivertracker.api.alpha.GetTrackResponse.track:type_name -> drivertracker.api.alpha.Track
	30, // 20: drivertracker.api.alpha.SearchTrackResponse.tracks:type_name -> drivertracker.api.alpha.Track
	30, // 21: drivertracker.api.alpha.Round.track:type_name -> drivertracker.api.alpha.Track
	23, // 22: drivertracker.api.alpha.Round.qualifying:type_name -> drivertracker.api.alpha.Qualifying
	15, // 23: drivertracker.api.alpha.Round.grandPrix:type_name -> drivertracker.api.alpha.GrandPrix
	30, // 24: drivertracker.api.alpha.StoreRoundRequest.track:type_name -> drivertracker.api.alpha.Track
	23, // 25: drivertracker.api.alpha.StoreRoundRequest.qualifying:type_name -> drivertracker.api.alpha.Qualifying
	15, // 26: drivertracker.api.alpha.StoreRoundRequest.grandPrix:type_name -> drivertracker.api.alpha.GrandPrix
	37, // 27: drivertracker.api.alpha.StoreRoundResponse.round:type_name -> drivertracker.api.alpha.Round
	37, // 28: drivertracker.api.alpha.GetRoundResponse.round:type_name -> drivertracker.api.alpha.Round
	37, // 29: drivertracker.api.alpha.SearchRoundResponse.rounds:type_name -> drivertracker.api.alpha.Round
	37, // 30: drivertracker.api.alpha.Season.round:type_name -> drivertracker.api.alpha.Round
	7,  // 31: drivertracker.api.alpha.Season.team:type_name -> drivertracker.api.alpha.Team
	14, // 32: drivertracker.api.alpha.Season.grandPrixParticipant:type_name -> drivertracker.api.alpha.GrandPrixParticipant
	37, // 33: drivertracker.api.alpha.StoreSeasonRequest.round:type_name -> drivertracker.api.alpha.Round
	7,  // 34: drivertracker.api.alpha.StoreSeasonRequest.team:type_name -> drivertracker.api.alpha.Team
	14, // 35: drivertracker.api.alpha.StoreSeasonRequest.grandPrixParticipant:type_name -> drivertracker.api.alpha.GrandPrixParticipant
	44, // 36: drivertracker.api.alpha.StoreSeasonResponse.season:type_name -> drivertracker.api.alpha.Season
	44, // 37: drivertracker.api.alpha.GetSeasonResponse.season:type_name -> drivertracker.api.alpha.Season
	44, // 38: drivertracker.api.alpha.SearchSeasonResponse.seasons:type_name -> drivertracker.api.alpha.Season
	1,  // 39: drivertracker.api.alpha.DriverTrackerAPI.StoreDriver:input_type -> drivertracker.api.alpha.StoreDriverRequest
	3,  // 40: drivertracker.api.alpha.DriverTrackerAPI.GetDriver:input_type -> drivertracker.api.alpha.GetDriverRequest
	5,  // 41: drivertracker.api.alpha.DriverTrackerAPI.SearchDriver:input_type -> drivertracker.api.alpha.SearchDriverRequest
	8,  // 42: drivertracker.api.alpha.DriverTrackerAPI.StoreTeam:input_type -> drivertracker.api.alpha.StoreTeamRequest
	10, // 43: drivertracker.api.alpha.DriverTrackerAPI.SearchTeamByName:input_type -> drivertracker.api.alpha.SearchTeamByNameRequest
	12, // 44: drivertracker.api.alpha.DriverTrackerAPI.GetTeam:input_type -> drivertracker.api.alpha.GetTeamRequest
	16, // 45: drivertracker.api.alpha.DriverTrackerAPI.StoreGrandPrix:input_type -> drivertracker.api.alpha.StoreGrandPrixRequest
	18, // 46: drivertracker.api.alpha.DriverTrackerAPI.GetGrandPrix:input_type -> drivertracker.api.alpha.GetGrandPrixRequest
	20, // 47: drivertracker.api.alpha.DriverTrackerAPI.SearchGrandPrix:input_type -> drivertracker.api.alpha.SearchGrandPrixRequest
	24, // 48: drivertracker.api.alpha.DriverTrackerAPI.StoreQualifying:input_type -> drivertracker.api.alpha.StoreQualifyingRequest
	26, // 49: drivertracker.api.alpha.DriverTrackerAPI.GetQualifying:input_type -> drivertracker.api.alpha.GetQualifyingRequest
	28, // 50: drivertracker.api.alpha.DriverTrackerAPI.SearchQualifying:input_type -> drivertracker.api.alpha.SearchQualifyingRequest
	31, // 51: drivertracker.api.alpha.DriverTrackerAPI.StoreTrack:input_type -> drivertracker.api.alpha.StoreTrackRequest
	33, // 52: drivertracker.api.alpha.DriverTrackerAPI.GetTrack:input_type -> drivertracker.api.alpha.GetTrackRequest
	35, // 53: drivertracker.api.alpha.DriverTrackerAPI.SearchTrack:input_type -> drivertracker.api.alpha.SearchTrackRequest
	38, // 54: drivertracker.api.alpha.DriverTrackerAPI.StoreRound:input_type -> drivertracker.api.alpha.StoreRoundRequest
	40, // 55: drivertracker.api.alpha.DriverTrackerAPI.GetRound:input_type -> drivertracker.api.alpha.GetRoundRequest
	42, // 56: drivertracker.api.alpha.DriverTrackerAPI.SearchRound:input_type -> drivertracker.api.alpha.SearchRoundRequest
	45, // 57: drivertracker.api.alpha.DriverTrackerAPI.StoreSeason:input_type -> drivertracker.api.alpha.StoreSeasonRequest
	47, // 58: drivertracker.api.alpha.DriverTrackerAPI.GetSeason:input_type -> drivertracker.api.alpha.GetSeasonRequest
	49, // 59: drivertracker.api.alpha.DriverTrackerAPI.SearchSeason:input_type -> drivertracker.api.alpha.SearchSeasonRequest
	2,  // 60: drivertracker.api.alpha.DriverTrackerAPI.StoreDriver:output_type -> drivertracker.api.alpha.StoreDriverResponse
	4,  // 61: drivertracker.api.alpha.DriverTrackerAPI.GetDriver:output_type -> drivertracker.api.alpha.GetDriverResponse
	6,  // 62: drivertracker.api.alpha.DriverTrackerAPI.SearchDriver:output_type -> drivertracker.api.alpha.SearchDriverResponse
	9,  // 63: drivertracker.api.alpha.DriverTrackerAPI.StoreTeam:output_type -> drivertracker.api.alpha.StoreTeamResponse
	11, // 64: drivertracker.api.alpha.DriverTrackerAPI.SearchTeamByName:output_type -> drivertracker.api.alpha.SearchTeamByNameResponse
	13, // 65: drivertracker.api.alpha.DriverTrackerAPI.GetTeam:output_type -> drivertracker.api.alpha.GetTeamResponse
	17, // 66: drivertracker.api.alpha.DriverTrackerAPI.StoreGrandPrix:output_type -> drivertracker.api.alpha.StoreGrandPrixResponse
	19, // 67: drivertracker.api.alpha.DriverTrackerAPI.GetGrandPrix:output_type -> drivertracker.api.alpha.GetGrandPrixResponse
	21, // 68: drivertracker.api.alpha.DriverTrackerAPI.SearchGrandPrix:output_type -> drivertracker.api.alpha.SearchGrandPrixResponse
	25, // 69: drivertracker.api.alpha.DriverTrackerAPI.StoreQualifying:output_type -> drivertracker.api.alpha.StoreQualifyingResponse
	27, // 70: drivertracker.api.alpha.DriverTrackerAPI.GetQualifying:output_type -> drivertracker.api.alpha.GetQualifyingResponse
	29, // 71: drivertracker.api.alpha.DriverTrackerAPI.SearchQualifying:output_type -> drivertracker.api.alpha.SearchQualifyingResponse
	32, // 72: drivertracker.api.alpha.DriverTrackerAPI.StoreTrack:output_type -> drivertracker.api.alpha.StoreTrackResponse
	34, // 73: drivertracker.api.alpha.DriverTrackerAPI.GetTrack:output_type -> drivertracker.api.alpha.GetTrackResponse
	36, // 74: drivertracker.api.alpha.DriverTrackerAPI.SearchTrack:output_type -> drivertracker.api.alpha.SearchTrackResponse
	39, // 75: drivertracker.api.alpha.DriverTrackerAPI.StoreRound:output_type -> drivertracker.api.alpha.StoreRoundResponse
	41, // 76: drivertracker.api.alpha.DriverTrackerAPI.GetRound:output_type -> drivertracker.api.alpha.GetRoundResponse
	43, // 77: drivertracker.api.alpha.DriverTrackerAPI.SearchRound:output_type -> drivertracker.api.alpha.SearchRoundResponse
	46, // 78: drivertracker.api.alpha.DriverTrackerAPI.StoreSeason:output_type -> drivertracker.api.alpha.StoreSeasonResponse
	48, // 79: drivertracker.api.alpha.DriverTrackerAPI.GetSeason:output_type -> drivertracker.api.alpha.GetSeasonResponse
	50, // 80: drivertracker.api.alpha.DriverTrackerAPI.SearchSeason:output_type -> drivertracker.api.alpha.SearchSeasonResponse
	60, // [60:81] is the sub-list for method output_type
	39, // [39:60] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_drivertracker_proto_init() }
func file_drivertracker_proto_init() {
	if File_drivertracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_drivertracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Driver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDriverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTeamByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTeamByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrandPrixParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrandPrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreGrandPrixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreGrandPrixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGrandPrixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGrandPrixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGrandPrixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchGrandPrixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifyingParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qualifying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreQualifyingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreQualifyingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQualifyingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQualifyingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQualifyingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQualifyingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchTrackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSeasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSeasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSeasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivertracker_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSeasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drivertracker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drivertracker_proto_goTypes,
		DependencyIndexes: file_drivertracker_proto_depIdxs,
		MessageInfos:      file_drivertracker_proto_msgTypes,
	}.Build()
	File_drivertracker_proto = out.File
	file_drivertracker_proto_rawDesc = nil
	file_drivertracker_proto_goTypes = nil
	file_drivertracker_proto_depIdxs = nil
}
